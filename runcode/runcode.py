import subprocess
import sys
import os
import re

# Error codes
ERROR_NOT_ARTHIMETIC_GEOMETRIC = "Sorry, I could not find any Arthimatic/Geometric relationship between Input & Output, Pls. check data!!!"
ERROR_LIST = [ ERROR_NOT_ARTHIMETIC_GEOMETRIC, 1 ]

class MyNoInputException(Exception):
    pass

class RunPyCode(object):
    
    def __init__(self, code=None):
        self.code = code
        if not os.path.exists('running'):
            os.mkdir('running')

    def _run_py_prog(self, cmd="_generatedcode.py"):
        cmd = [sys.executable, cmd]
        p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        result = p.wait()
        a, b = p.communicate()
        self.stdout, self.stderr = a.decode("utf-8"), b.decode("utf-8")
        return result


    # ------------------------ extract_input_output_names ----------------------------------------------
    #
    def extract_input_output_names(self, code):

        import re
        from traceback import print_exc

        code_lines = code.split("\n")
        ioline = ""
        for line in code_lines:
            if '@input' in line:
                ioline = line
                break;

        error = ''  # init
        try:
            if not ('@input' in ioline and '@output' in ioline):
                raise MyNoInputException("Legend missing")

            text_part1, text_part2 = ioline.split(";")  # handled by 'ValueError' exception

            # use [ ?] , [\w] gives less empty string matches instead of ( ?) , (\w)
            regex2 = r"output([ ?]*)=([ ?]*)([\w]+)"
            matches = re.findall(regex2, text_part2)
            print(str(matches[0]))
            output_symbol = str(matches[0][2])

            parts_for_input = text_part1.split(",")  # if no ',' then it just return whole string
            regex1 = r"input([ ?]*)=([ ?]*)([\w]+)"
            matches = re.findall(regex1, parts_for_input[0])
            print(str(matches[0]))
            input_symbol = str(matches[0][2])

            input2_symbol = ''
            if len(parts_for_input) > 1:  # if second input parmeter exists, then only extract it
                input2_symbol = parts_for_input[1]

            print(input_symbol, output_symbol, input2_symbol)

        except Exception as e:
            type = e.__class__.__name__
            if type == 'MyNoInputException':
                error = "***********------ @input @output Meta tags are missing ..... "
            if type == 'ValueError':
                error = "***********------The separator ; is missing in the input output legend"
            else:
                error = '***********------ some other different exception occured '
            #print(type)
            #print_exc()

        if error == '':
            # first 2 params as symbols '{}', next 2 as value
            code_str = "\n\n# --------------------- main program call generated by runcode.py--------------------------\n" + \
                       "code = main_entry_point('{}' , '{}', {}, {})\n".format(input_symbol, output_symbol,
                                                                               input_symbol, output_symbol) + \
                       "print(code)\n\n"  # print() will sends to stadout which in tern get back to browser
        else:
            code_str = error

        return code_str  # this code_str is written into a.out file , see contents


    # ------------------------ run_py_code ----------------------------------------------
    #
    def run_py_code(self, submit_type, code=None):
        filename = "./running/_generatedcode.py"
        if not code:
            code = self.code

        with open(filename, "w") as f:
            f.write(code)  # user entered coded from the editor

            if submit_type == 'Invoke Bot':
                botcode = open('./running/bot_algo.py', 'r').read()
                f.write(botcode)  # and ADD botcode that is is our alog code from bot_algo.py file

                main_call_code = self.extract_input_output_names(code)
                f.write(main_call_code)
                if 'Index Error' in main_call_code:
                    return main_call_code, main_call_code  # return error to both std_err, std_out

        self._run_py_prog(filename)

        std_err, std_out = self.stderr, self.stdout
        #std_out = ERROR_NOT_ARTHIMETIC_GEOMETRIC
        if std_out in ERROR_LIST:
            std_err = std_out
            std_out = ''

        return std_err, std_out

